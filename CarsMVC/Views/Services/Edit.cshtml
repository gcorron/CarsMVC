@model CarsMVC.ViewModels.ServiceViewModel
@section Scripts {
    <script>
        $(function () {
            $('[data-confirm]').click(function (e) {
                if (!confirm($(this).attr("data-confirm"))) {
                    e.preventDefault();
                }
            });
        });

        function AddNewLine() {
            var row = document.getElementById("BL"); // find row to copy
            var table = document.getElementById("details"); // find table to append to
            var tbody = table.getElementsByTagName("tbody")[0];
            var n = $('#detailsbody tr').length - 1; //compute next based index don't count blank row
            var clone = row.cloneNode(true); // copy children too
            var rowitems = clone.getElementsByTagName("td")
            for (i = 0; i < rowitems.length; i++) {
                var el = rowitems[i].firstChild;
                el.setAttribute("id", el.id.replace("BlankLine_", "ServiceLines_" + n + "__"));
                el.setAttribute("name", el.name.replace("BlankLine", "ServiceLines[" + n + "]"));
            }
            clone.removeAttribute("style");
            clone.removeAttribute("id");
            tbody.appendChild(clone); // add new row to end of tablebody

        }

        function Recalc() {

            var sums = [0, 0, 0];
            var i;
            var charge;

            $('input.numeric-cost').each(function () {
                charge = Number($(this).val());
                sums[2] += charge;
                var el = $(this).parentsUntil('tbody', 'tr').first().find(':selected');
                i = el;
                if (el != null) {

                    i = Number(el.val());
                    switch (i) {
                        case 0:
                            sums[0] += charge;
                            break;
                        case 1:
                            sums[1] += charge;
                            break;
                        default:
                            sums[1] = i;
                    }
                }
            });
            i = 0;
            $('tfoot tr').each(function () {
                $(this).children().last().text('$' + sums[i++].toFixed(2));
            })
        }

    </script>
}

@{

    ViewBag.Title = "Edit";
}

<h2>Edit Service</h2>

@using (Html.BeginForm("Edit", "Services", FormMethod.Post, htmlAttributes: new { id = "thisform" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ServiceID)
    @Html.HiddenFor(m => m.CarID)
    @Html.HiddenFor(m => m.ForCar)

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    @Html.ValidationMessage("CustomError")

    <div>
        <hr />
        <div class="container">
            <div class="well well-sm col-md-8">
                <table class="table table-condensed">
                    <tr style="font-weight:700">
                        <td>@Html.DisplayNameFor(m => m.ForCar)</td>
                        <td>@Html.DisplayNameFor(m => m.ServiceDate)</td>
                        <td>@Html.DisplayNameFor(model => model.TechName)</td>
                    </tr>
                    <tr>
                        <td>@Html.DisplayFor(m => m.ForCar)</td>

                        <td>@Html.EditorFor(model => model.ServiceDate)</td>
                        <td>@Html.EditorFor(model => model.TechName)</td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-lg-8">
                    <table id="details" class="table table-striped table-condensed">
                        <thead>
                            <tr style="font-weight:700">
                                <td>
                                    @Html.DisplayNameFor(model => model.ServiceLines[0].ServiceLineTypeString)
                                </td>
                                <td colspan="2">
                                    @Html.DisplayNameFor(model => model.ServiceLines[0].ServiceLineDesc)
                                </td>
                                <td align="right">
                                    @Html.DisplayNameFor(model => model.ServiceLines[0].ServiceLineCharge)
                                </td>
                                <td>
                                    @Html.DisplayNameFor(model => model.ServiceLines[0].Delete)
                                </td>
                            </tr>
                        </thead>
                        <tbody id="detailsbody">

                            <tr style="visibility:collapse" id="BL">
                                @* script will copy these elements for new lines added *@
                                @{Html.EnableClientValidation(false); }
                                <td>@Html.EnumDropDownListFor(m => m.BlankLine.ServiceLineType, "Select Type", new { @class = "form-control-sm" })</td>
                                <td colspan="2">@Html.TextBoxFor(m => m.BlankLine.ServiceLineDesc, new { size = 200 })</td>
                                <td align="right">@Html.EditorFor(m => m.BlankLine.ServiceLineCharge, new { htmlAttributes = new { @class = "numeric-cost" } })</td>
                                <td>@Html.EditorFor(m => m.BlankLine.Delete)</td>
                            </tr>

                            @for (int i = 0; i < Model.ServiceLines.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.EnumDropDownListFor(m => m.ServiceLines[i].ServiceLineType, "Select Type", new { @class = "form-control-sm" })
                                    </td>
                                    <td colspan="2">
                                        @Html.TextBoxFor(m => m.ServiceLines[i].ServiceLineDesc, new { size = 200 })
                                    </td>
                                    <td align="right">@Html.EditorFor(m => m.ServiceLines[i].ServiceLineCharge, new { htmlAttributes = new { @class = "numeric-cost" } })</td>
                                    <td>@Html.EditorFor(m => m.ServiceLines[i].Delete)</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td></td>
                                <td class="success">Total Charges</td>
                                <td class="success">Labor</td>
                                <td class="success" align="right">@Html.DisplayFor(model => model.LaborCost, new { @class = "pmtallocated pull-right", @dir = "rtl" })</td>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                                <td class="success">Parts</td>
                                <td class="success" align="right">@Html.DisplayFor(model => model.PartsCost, new { @class = "pmtallocated pull-right", @dir = "rtl" })</td>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                                <td class="success">Total</td>
                                <td class="success" align="right">@Html.DisplayFor(model => model.TotalCost, new { @class = "pmtallocated pull-right", @dir = "rtl" })</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>


    </div>
    <button type="button" class="btn btn-default" onclick="location.href='@Url.Action("Index", new { id = Model.CarID })'">Back</button>
    <button type="submit" class="btn btn-success" formaction=@Url.Action("Edit","Services",new { id = Model.ServiceID })>Save</button>
// server recalc    <button type="submit" class="btn btn-info" formaction=@Url.Action("Recalc","Services",new { id = Model.ServiceID })>Recalculate</button>
    <button type="button" class="btn btn-info" onclick="Recalc()">Recalculate</button>
    <button type="button" class="btn btn-warning" onclick="AddNewLine()">Add Line</button>
    if (Model.ServiceID != 0)
    {
        <button type="submit" class="btn btn-danger" data-confirm="Are you sure?" formaction=@Url.Action("Delete","Services",new { id = Model.ServiceID })>Delete</button>
    }

}